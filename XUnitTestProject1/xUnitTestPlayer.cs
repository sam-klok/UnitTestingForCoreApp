using System;
using Xunit;
using ClassLibraryCore;
using System.Collections.Generic;


namespace XUnitTestProject1
{
    public class xUnitTestPlayer
    {
        [Fact]
        public void IsPlayerNoob()
        {
            var sut = new Player();  // sut = System Under Testing

            Assert.True(sut.IsNoob());

        }

        [Fact]
        public void CheckFullName()
        {
            var sut = new Player();
            sut.Name = "Serge";
            sut.LastName = "Klokov";

            Assert.Equal("Serge KLOKOV", sut.FullName, ignoreCase: true);
        }

        // something wrong here
        [Fact]
        public void CheckFullNameForNumbers()
        {
            var sut = new Player();
            sut.Name = "Serge";
            sut.LastName = "Klokov134544$$$^&&";

            Assert.Matches("^[A-Z]", sut.FullName);  // should fail. hmm
        }

        [Fact]
        public void CheckAge()
        {
            var sut = new Player();


            Assert.InRange(sut.Age(), 5, 110);
        }

        [Fact]
        public void CheckAgeExcessive()
        {
            var sut = new Player();
            sut.age = 3000;


            Assert.InRange(sut.Age(), 5, 110);  // should fail. good. 
        }

        //[Fact]
        ////(Name="xUnit have all imaginable test methods..")]

        //public void AreCollectionsEqualTest()
        //{
        //    var collectionA = new List<int>() { 1, 2, 34, 324, 3, 9 };
        //    var collectionB = new List<int>() { 1, 2, 34, 324, 3, 9 };

        //    Assert.Matches(collectionA, collectionB);
        //}


        [Fact]
        public void CollectionContain()
        {
            var collectionA = new List<int>() { 1, 2, 34, 324, 3, 9 };
            var collectionB = new List<int>() { 1, 2, 34, 324, 3, 9 };

            Assert.Contains(34, collectionA);
        }


        [Fact]
        public void CollectionContainWord()
        {
            var collectionA = new List<string>() { "Steel sword", "Woodden spike"};

            Assert.Contains(collectionA, x=>x.Contains("sword"));
        }


        [Fact]
        public void CheckType()
        {
            var sut = new PlayerExpert();  // well.. should be generated by some factory
            sut.age = 34;


            Assert.IsType<PlayerExpert>(sut);  // strict test
        }

        [Fact]
        public void CheckTypeSoft()
        {
            var sut = new PlayerExpert();  
            sut.age = 34;


            Assert.IsAssignableFrom<Player>(sut);
        }

        [Fact]
        public void CheckException()
        {
            var sut = new PlayerExpert();
            sut.age = 34;


            Assert.Throws<ArgumentNullException>(() => sut.CauseArgNulEx(null));
        }
    }
}
